{"version":3,"file":"static/js/314.29e804e1.chunk.js","mappings":"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","sources":["components/ContactForm/ContactFormStyled.js","components/ContactForm/ContactForm.jsx","components/Contacts/ContactsStyled.js","components/ContactItem/ContactItemStyled.jsx","components/ContactItem/ContactItem.jsx","components/Contacts/Contacts.jsx","components/Filter/Filterstyled.js","components/Filter/Filter.jsx","components/SectionStyled.js","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ContactFormStyled = styled.form`\n  max-width: 400px;\n  margin: 0 auto;\n  padding: 20px;\n  background-color: #f4f4f4;\n  border-radius: 8px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n\n  label {\n    display: block;\n    margin-bottom: 10px;\n\n    span {\n      display: block;\n      font-weight: bold;\n      margin-bottom: 5px;\n    }\n\n    input {\n      width: 100%;\n      padding: 8px;\n      font-size: 16px;\n      border: 1px solid #ccc;\n      border-radius: 4px;\n      box-sizing: border-box;\n    }\n  }\n\n  button {\n    background-color: #ff9b00;\n    color: #fff;\n    padding: 10px 15px;\n    font-size: 16px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n\n    &:hover {\n      background-color: #0056b3;\n    }\n  }\n`;\n","import { ContactFormStyled } from './ContactFormStyled';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../Redux/selectors';\nimport { addContactThunk } from '../../Redux/contacts/operations';\n\nfunction ContactForm() {\n  const [nameContact, setNameContact] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleOnChange = evt => {\n    const { name, value } = evt.currentTarget;\n    if (name === 'name') {\n      setNameContact(value);\n    }\n    if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const handleOnSubmit = evt => {\n    evt.preventDefault();\n    const finded = contacts.find(contact => contact.name === nameContact);\n    if (finded) {\n      alert(`${nameContact} is already in contacts`);\n      return;\n    }\n    dispatch(addContactThunk({ name: nameContact, number }));\n\n    reset();\n  };\n\n  const reset = () => {\n    setNameContact('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <ContactFormStyled onSubmit={handleOnSubmit}>\n        <label>\n          <span>Name</span>\n          <input\n            value={nameContact}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            onChange={handleOnChange}\n          />\n        </label>\n        <label>\n          <span>Number</span>\n          <input\n            value={number}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            onChange={handleOnChange}\n          />\n        </label>\n\n        <button type=\"submit\">Add contact</button>\n      </ContactFormStyled>\n    </>\n  );\n}\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const ContactsDivStyled = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding-top: 20px;\n`;\n","import styled from 'styled-components';\n\nexport const ContactDivStyled = styled.div`\n  padding: 15px;\n  background-color: #ffffff;\n  border: 1px solid #e0e0e0;\n  border-radius: 4px;\n  margin-bottom: 10px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  p {\n    margin: 0;\n    font-size: 16px;\n  }\n\n  button {\n    background-color: #ff9b00;\n    color: #fff;\n    padding: 8px 12px;\n    font-size: 14px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n\n    &:hover {\n      background-color: #c82333;\n    }\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { ContactDivStyled } from './ContactItemStyled';\n\nconst ContactItem = ({ id, name, number, onRemoveContact }) => {\n  return (\n    <ContactDivStyled key={id}>\n      <p>\n        {name}: {number}\n      </p>\n      <button type=\"button\" onClick={() => onRemoveContact(id)}>\n        Delete\n      </button>\n    </ContactDivStyled>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onRemoveContact: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import { ContactsDivStyled } from './ContactsStyled';\nimport ContactItem from 'components/ContactItem/ContactItem';\nimport { deleteContactThunk } from '../../Redux/contacts/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectVisibleContacts } from '../../Redux/selectors';\n\nfunction Contacts() {\n  const dispatch = useDispatch();\n  const filteredContacts = useSelector(selectVisibleContacts);\n  const onRemoveContact = contactId => {\n    dispatch(deleteContactThunk(contactId));\n  };\n  return (\n    <>\n      <ContactsDivStyled>\n        {filteredContacts.map(({ id, name, number }) => {\n          return (\n            <ContactItem\n              key={id}\n              id={id}\n              name={name}\n              number={number}\n              onRemoveContact={onRemoveContact}\n            />\n          );\n        })}\n      </ContactsDivStyled>\n    </>\n  );\n}\n\nexport default Contacts;\n","import styled from 'styled-components';\n\nexport const InputStyled = styled.input`\n  width: 100%;\n  padding: 10px;\n  font-size: 16px;\n  margin-top: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-sizing: border-box;\n`;\n","import { InputStyled } from './Filterstyled';\nimport { filterContact } from '../../Redux/contacts/slice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilterValue } from '../../Redux/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(selectFilterValue);\n  const handleOnChangeFilter = evt => {\n    dispatch(filterContact(evt.currentTarget.value));\n  };\n\n  return (\n    <>\n      <h3>Find contacts by name</h3>\n      <InputStyled type=\"text\" value={value} onChange={handleOnChangeFilter} />\n    </>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  max-width: 400px;\n  margin: 50px auto 0;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  background-color: #ffffff;\n  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\n  border-radius: 8px;\n`;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Contacts from 'components/Contacts/Contacts';\nimport Filter from 'components/Filter/Filter';\nimport Loader from 'components/Loader/Loader';\nimport { Section } from 'components/SectionStyled';\n\nimport { fetchContactThunk } from '../../Redux/contacts/operations';\nimport { selectError, selectIsLoading } from '../../Redux/selectors';\n\nexport const ContactsPage = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContactThunk());\n  }, [dispatch]);\n\n  return (\n    <Section>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && <Loader />}\n      {error && <>Oops... Error: {error}</>}\n      <Contacts />\n    </Section>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["ContactFormStyled","styled","_templateObject","_taggedTemplateLiteral","_useState","useState","_useState2","_slicedToArray","nameContact","setNameContact","_useState3","_useState4","number","setNumber","dispatch","useDispatch","contacts","useSelector","selectContacts","handleOnChange","evt","_evt$currentTarget","currentTarget","name","value","reset","_jsx","_Fragment","children","_jsxs","onSubmit","preventDefault","find","contact","alert","concat","addContactThunk","type","pattern","title","required","onChange","ContactsDivStyled","ContactDivStyled","_ref","id","onRemoveContact","onClick","filteredContacts","selectVisibleContacts","contactId","deleteContactThunk","map","ContactItem","InputStyled","selectFilterValue","filterContact","Section","ContactsPage","isLoading","selectIsLoading","error","selectError","useEffect","fetchContactThunk","ContactForm","Filter","Loader","Contacts"],"sourceRoot":""}